{"version":3,"sources":["webpack:///index.js","webpack:///webpack/bootstrap 63db6fe46eedeaf7a06b","webpack:///./src/browser-router.ts","webpack:///./src/helper.ts","webpack:///./src/router.ts","webpack:///./~/path-to-regexp/index.js","webpack:///./~/path-to-regexp/~/isarray/index.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_0__helper__","__WEBPACK_IMPORTED_MODULE_1__router__","__WEBPACK_IMPORTED_MODULE_2__browser_router__","__WEBPACK_IMPORTED_MODULE_0____","BrowserRouter","__extends","this","extendStatics","setPrototypeOf","__proto__","Array","b","__","constructor","create","_super","opts","send","defaultSend","_this","addEventListener","processCurrentPath","target","content","sent","Error","el","document","querySelector","innerHTML","stop","removeEventListener","getPath","path","decodeURI","location","pathname","search","trimSlashes","push","history","pushState","processPath","__WEBPACK_IMPORTED_MODULE_0_path_to_regexp__","RouterHelper","stringToRegexp","str","parseSearch","searchObj","charAt","slice","params","split","_i","params_1","length","param","paramKv","decodeURIComponent","parsePath","url","URL","createElement","href","replace","LEADING_SLASHES_STRIPPER","obtainRequestProcessors","handlers","parsedPath","request","requestProcessors","handlers_1","handler","pathExp","test","populateRequest","callback","result","exec","args","keys","undefined","Router","res","use","reqProcessors","count","next","reqProc","parse","options","tokens","key","index","defaultDelimiter","delimiter","PATH_REGEXP","escaped","offset","prefix","capture","group","modifier","asterisk","partial","repeat","optional","pattern","escapeGroup","escapeString","substr","compile","tokensToFunction","encodeURIComponentPretty","encodeURI","charCodeAt","toString","toUpperCase","encodeAsterisk","matches","RegExp","obj","data","encode","pretty","encodeURIComponent","token","segment","TypeError","isarray","JSON","stringify","j","attachKeys","re","flags","sensitive","regexpToRegexp","groups","source","match","arrayToRegexp","parts","pathToRegexp","join","tokensToRegExp","strict","end","route","endsWithDelimiter","isArray","arr"],"mappings":"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","file":"index.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__helper__ = __webpack_require__(2);\n/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, \"RouterHelper\", function() { return __WEBPACK_IMPORTED_MODULE_0__helper__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__router__ = __webpack_require__(3);\n/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, \"Router\", function() { return __WEBPACK_IMPORTED_MODULE_1__router__[\"a\"]; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__browser_router__ = __webpack_require__(1);\n/* harmony namespace reexport (by provided) */ __webpack_require__.d(__webpack_exports__, \"BrowserRouter\", function() { return __WEBPACK_IMPORTED_MODULE_2__browser_router__[\"a\"]; });\n\r\n\r\n\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0____ = __webpack_require__(0);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return BrowserRouter; });\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\nvar BrowserRouter = (function (_super) {\r\n    __extends(BrowserRouter, _super);\r\n    function BrowserRouter(opts) {\r\n        if (opts === void 0) { opts = { send: BrowserRouter.defaultSend }; }\r\n        var _this = this;\r\n        if (!opts.send) {\r\n            opts.send = BrowserRouter.defaultSend;\r\n        }\r\n        _this = _super.call(this, opts) || this;\r\n        addEventListener('popstate', _this.processCurrentPath);\r\n        return _this;\r\n    }\r\n    BrowserRouter.defaultSend = function (target, content) {\r\n        if (BrowserRouter.sent[target]) {\r\n            throw new Error(\"Already sent data to the target '\" + target + \"'.\");\r\n        }\r\n        BrowserRouter.sent[target] = true;\r\n        var el = document.querySelector(target);\r\n        if (!el) {\r\n            throw new Error(\"No match for the selector \" + target);\r\n        }\r\n        el.innerHTML = content;\r\n    };\r\n    /**\r\n     * Not useful in a real app; but useful for unit testing.\r\n     */\r\n    BrowserRouter.prototype.stop = function () {\r\n        removeEventListener('popstate', this.processCurrentPath);\r\n    };\r\n    BrowserRouter.prototype.getPath = function () {\r\n        var path = decodeURI(location.pathname + location.search);\r\n        return __WEBPACK_IMPORTED_MODULE_0____[\"RouterHelper\"].trimSlashes(path);\r\n    };\r\n    BrowserRouter.prototype.push = function (path) {\r\n        history.pushState(null, '', path);\r\n        this.processPath(path);\r\n    };\r\n    BrowserRouter.prototype.processPath = function (path) {\r\n        BrowserRouter.sent = {};\r\n        _super.prototype.processPath.call(this, path);\r\n    };\r\n    BrowserRouter.prototype.processCurrentPath = function () {\r\n        var path = this.getPath();\r\n        this.processPath(path);\r\n    };\r\n    return BrowserRouter;\r\n}(__WEBPACK_IMPORTED_MODULE_0____[\"Router\"]));\r\n\r\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_path_to_regexp__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_path_to_regexp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_path_to_regexp__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return RouterHelper; });\n\r\nvar RouterHelper = (function () {\r\n    function RouterHelper() {\r\n    }\r\n    RouterHelper.stringToRegexp = function (str) {\r\n        return __WEBPACK_IMPORTED_MODULE_0_path_to_regexp__(str);\r\n    };\r\n    RouterHelper.parseSearch = function (str) {\r\n        var searchObj = {};\r\n        if (str === '') {\r\n            return searchObj;\r\n        }\r\n        if (str.charAt(0) === '?') {\r\n            str = str.slice(1);\r\n        }\r\n        var params = str.split('&');\r\n        for (var _i = 0, params_1 = params; _i < params_1.length; _i++) {\r\n            var param = params_1[_i];\r\n            var paramKv = param.split('=');\r\n            searchObj[decodeURIComponent(paramKv[0])] = decodeURIComponent(paramKv[1]);\r\n        }\r\n        return searchObj;\r\n    };\r\n    RouterHelper.parsePath = function (path) {\r\n        var url;\r\n        if (typeof URL === 'function') {\r\n            url = new URL(path, 'http://example.com');\r\n        }\r\n        else {\r\n            url = document.createElement('a');\r\n            url.href = 'http://example.com/' + path;\r\n        }\r\n        var parsedPath = {\r\n            pathname: RouterHelper.trimSlashes(url.pathname),\r\n            search: url.search,\r\n            searchObj: RouterHelper.parseSearch(url.search)\r\n        };\r\n        return parsedPath;\r\n    };\r\n    RouterHelper.trimSlashes = function (str) {\r\n        return str.replace(RouterHelper.LEADING_SLASHES_STRIPPER, '');\r\n    };\r\n    /**\r\n     * Obtain the request processors for the given path according to the handlers in the router.\r\n     */\r\n    RouterHelper.obtainRequestProcessors = function (path, handlers) {\r\n        var parsedPath = RouterHelper.parsePath(path);\r\n        var request = RouterHelper.parsePath(path);\r\n        request.params = {};\r\n        var requestProcessors = [];\r\n        for (var _i = 0, handlers_1 = handlers; _i < handlers_1.length; _i++) {\r\n            var handler = handlers_1[_i];\r\n            var hasProcessor = handler.pathExp.test(parsedPath.pathname);\r\n            if (hasProcessor) {\r\n                RouterHelper.populateRequest(request, handler.pathExp);\r\n                requestProcessors.push({ callback: handler.callback, request: request });\r\n            }\r\n        }\r\n        return requestProcessors;\r\n    };\r\n    RouterHelper.populateRequest = function (request, pathExp) {\r\n        var result = pathExp.exec(request.pathname);\r\n        var args = result ? result.slice(1) : [];\r\n        var keys = pathExp.keys;\r\n        for (var i = 0; i < args.length; i++) {\r\n            if (args[i] !== undefined) {\r\n                request.params[keys[i].name] = decodeURIComponent(args[i]);\r\n            }\r\n        }\r\n        return request;\r\n    };\r\n    return RouterHelper;\r\n}());\r\n\r\nRouterHelper.LEADING_SLASHES_STRIPPER = /^\\/+|\\/+$/;\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0____ = __webpack_require__(0);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Router; });\n\r\nvar Router = (function () {\r\n    function Router(opts) {\r\n        this.opts = opts;\r\n        this.handlers = [];\r\n        this.res = { send: this.opts.send };\r\n    }\r\n    Router.prototype.use = function (path, callback) {\r\n        var pathExp = __WEBPACK_IMPORTED_MODULE_0____[\"RouterHelper\"].stringToRegexp(path);\r\n        this.handlers.push({ pathExp: pathExp, callback: callback });\r\n        return this;\r\n    };\r\n    Router.prototype.processPath = function (path) {\r\n        var _this = this;\r\n        var reqProcessors = __WEBPACK_IMPORTED_MODULE_0____[\"RouterHelper\"].obtainRequestProcessors(path, this.handlers);\r\n        var count = 0;\r\n        /** Anonymous function used for processing routing cycle. */\r\n        var next = function () {\r\n            if (count >= reqProcessors.length) {\r\n                return;\r\n            }\r\n            var reqProc = reqProcessors[count];\r\n            count++;\r\n            reqProc.callback(reqProc.request, _this.res, next);\r\n        };\r\n        next();\r\n    };\r\n    return Router;\r\n}());\r\n\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isarray = __webpack_require__(5)\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\nmodule.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// index.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 63db6fe46eedeaf7a06b","import { Options, RouterHelper, Router } from './';\r\n\r\nexport class BrowserRouter extends Router {\r\n\r\n  private static sent: {};\r\n\r\n  constructor(opts: Options = { send: BrowserRouter.defaultSend }) {\r\n\r\n    if (!opts.send) {\r\n      opts.send = BrowserRouter.defaultSend;\r\n    }\r\n\r\n    super(opts);\r\n\r\n    addEventListener('popstate', this.processCurrentPath);\r\n  }\r\n\r\n  static defaultSend(target: string, content: string) {\r\n\r\n    if (BrowserRouter.sent[target]) {\r\n      throw new Error(`Already sent data to the target '${target}'.`);\r\n    }\r\n\r\n    BrowserRouter.sent[target] = true;\r\n\r\n    const el = document.querySelector(target);\r\n\r\n    if (!el) {\r\n      throw new Error(`No match for the selector ${target}`);\r\n    }\r\n\r\n    el.innerHTML = content;\r\n  }\r\n\r\n  /**\r\n   * Not useful in a real app; but useful for unit testing.\r\n   */\r\n  stop() {\r\n    removeEventListener('popstate', this.processCurrentPath);\r\n  }\r\n\r\n  getPath() {\r\n    const path = decodeURI(location.pathname + location.search);\r\n    return RouterHelper.trimSlashes(path);\r\n  }\r\n\r\n  push(path: string) {\r\n    history.pushState(null, '', path);\r\n    this.processPath(path);\r\n  }\r\n\r\n  protected processPath(path: string) {\r\n    BrowserRouter.sent = {};\r\n    super.processPath(path);\r\n  }\r\n\r\n  private processCurrentPath() {\r\n    const path = this.getPath();\r\n    this.processPath(path);\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/browser-router.ts","import * as pathToRegexp from 'path-to-regexp';\r\n\r\nimport { Path, PathExp, RequestProcessor, Request, Handler } from './';\r\n\r\n\r\nexport class RouterHelper {\r\n\r\n  private static LEADING_SLASHES_STRIPPER = /^\\/+|\\/+$/;\r\n\r\n  static stringToRegexp(str: string) {\r\n    return pathToRegexp(str);\r\n  }\r\n\r\n  static parseSearch(str: string) {\r\n\r\n    const searchObj = {};\r\n\r\n    if (str === '') {\r\n      return searchObj;\r\n    }\r\n\r\n    if (str.charAt(0) === '?') {\r\n      str = str.slice(1);\r\n    }\r\n\r\n    const params = str.split('&');\r\n\r\n    for (const param of params) {\r\n      const paramKv = param.split('=');\r\n      searchObj[decodeURIComponent(paramKv[0])] = decodeURIComponent(paramKv[1]);\r\n    }\r\n\r\n    return searchObj;\r\n  }\r\n\r\n  static parsePath(path: string) {\r\n\r\n    let url: URL | HTMLAnchorElement;\r\n\r\n    if (typeof URL === 'function') {\r\n      url = new URL(path, 'http://example.com');\r\n    } else {\r\n      url = document.createElement('a');\r\n      url.href = 'http://example.com/' + path;\r\n    }\r\n\r\n    const parsedPath: Path = {\r\n      pathname: RouterHelper.trimSlashes(url.pathname),\r\n      search: url.search,\r\n      searchObj: RouterHelper.parseSearch(url.search)\r\n    };\r\n\r\n    return parsedPath;\r\n  }\r\n\r\n  static trimSlashes(str: string) {\r\n    return str.replace(RouterHelper.LEADING_SLASHES_STRIPPER, '');\r\n  }\r\n\r\n  /**\r\n   * Obtain the request processors for the given path according to the handlers in the router.\r\n   */\r\n  static obtainRequestProcessors(path: string, handlers: Handler[]) {\r\n\r\n    const parsedPath = RouterHelper.parsePath(path);\r\n\r\n    const request: Request = RouterHelper.parsePath(path);\r\n    request.params = {};\r\n\r\n    const requestProcessors: RequestProcessor[] = [];\r\n\r\n    for (const handler of handlers) {\r\n\r\n      const hasProcessor = handler.pathExp.test(parsedPath.pathname);\r\n\r\n      if (hasProcessor) {\r\n        RouterHelper.populateRequest(request, handler.pathExp);\r\n        requestProcessors.push({ callback: handler.callback, request });\r\n      }\r\n    }\r\n\r\n    return requestProcessors;\r\n  }\r\n\r\n  private static populateRequest(request: Request, pathExp: PathExp) {\r\n\r\n    const result = pathExp.exec(request.pathname);\r\n    const args = result ? result.slice(1) : [];\r\n    const keys = pathExp.keys;\r\n\r\n    for (let i = 0; i < args.length; i++) {\r\n      if (args[i] !== undefined) {\r\n        request.params[keys[i].name] = decodeURIComponent(args[i]);\r\n      }\r\n    }\r\n\r\n    return request;\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/helper.ts","import { Handler, RequestCallback, Response, Options, RouterHelper } from './';\r\n\r\nexport abstract class Router {\r\n\r\n  private handlers: Handler[] = [];\r\n  private res: Response;\r\n\r\n  constructor(private opts: Options) {\r\n    this.res = { send: this.opts.send };\r\n  }\r\n\r\n  use(path: string, callback: RequestCallback) {\r\n    const pathExp = RouterHelper.stringToRegexp(path);\r\n    this.handlers.push({ pathExp, callback });\r\n    return this;\r\n  }\r\n\r\n  protected processPath(path: string) {\r\n\r\n    const reqProcessors = RouterHelper.obtainRequestProcessors(path, this.handlers);\r\n\r\n    let count = 0;\r\n\r\n    /** Anonymous function used for processing routing cycle. */\r\n    const next = () => {\r\n\r\n      if (count >= reqProcessors.length) {\r\n        return;\r\n      }\r\n\r\n      const reqProc = reqProcessors[count];\r\n\r\n      count++;\r\n\r\n      reqProc.callback(reqProc.request, this.res, next);\r\n    };\r\n\r\n    next();\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/router.ts","var isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/path-to-regexp/index.js\n// module id = 4\n// module chunks = 0","module.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/path-to-regexp/~/isarray/index.js\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}